// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// r_volpak_tree
Rcpp::S4 r_volpak_tree(Rcpp::NumericVector height, Rcpp::NumericVector radius, Rcpp::NumericVector total_height, Rcpp::NumericVector stump_height);
RcppExport SEXP _volpak_r_volpak_tree(SEXP heightSEXP, SEXP radiusSEXP, SEXP total_heightSEXP, SEXP stump_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type total_height(total_heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stump_height(stump_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_volpak_tree(height, radius, total_height, stump_height));
    return rcpp_result_gen;
END_RCPP
}
// r_total_vol
Rcpp::NumericVector r_total_vol(Rcpp::S4 tree, Rcpp::LogicalVector abovestump, Rcpp::LogicalVector abovetop);
RcppExport SEXP _volpak_r_total_vol(SEXP treeSEXP, SEXP abovestumpSEXP, SEXP abovetopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type abovestump(abovestumpSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type abovetop(abovetopSEXP);
    rcpp_result_gen = Rcpp::wrap(r_total_vol(tree, abovestump, abovetop));
    return rcpp_result_gen;
END_RCPP
}
// r_get_hag
Rcpp::NumericVector r_get_hag(Rcpp::S4 tree, Rcpp::NumericVector search_radius);
RcppExport SEXP _volpak_r_get_hag(SEXP treeSEXP, SEXP search_radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type search_radius(search_radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(r_get_hag(tree, search_radius));
    return rcpp_result_gen;
END_RCPP
}
// r_get_radius
Rcpp::NumericVector r_get_radius(Rcpp::S4 tree, Rcpp::NumericVector search_height);
RcppExport SEXP _volpak_r_get_radius(SEXP treeSEXP, SEXP search_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type search_height(search_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_get_radius(tree, search_height));
    return rcpp_result_gen;
END_RCPP
}
// r_vol_to_tdub
Rcpp::NumericVector r_vol_to_tdub(Rcpp::S4 tree, Rcpp::NumericVector tdub, Rcpp::LogicalVector abovestump);
RcppExport SEXP _volpak_r_vol_to_tdub(SEXP treeSEXP, SEXP tdubSEXP, SEXP abovestumpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tdub(tdubSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type abovestump(abovestumpSEXP);
    rcpp_result_gen = Rcpp::wrap(r_vol_to_tdub(tree, tdub, abovestump));
    return rcpp_result_gen;
END_RCPP
}
// r_vol_to_hag
Rcpp::NumericVector r_vol_to_hag(Rcpp::S4 tree, Rcpp::NumericVector hag, Rcpp::LogicalVector abovestump);
RcppExport SEXP _volpak_r_vol_to_hag(SEXP treeSEXP, SEXP hagSEXP, SEXP abovestumpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type hag(hagSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type abovestump(abovestumpSEXP);
    rcpp_result_gen = Rcpp::wrap(r_vol_to_hag(tree, hag, abovestump));
    return rcpp_result_gen;
END_RCPP
}
// r_list_measures
Rcpp::DataFrame r_list_measures(Rcpp::S4 tree);
RcppExport SEXP _volpak_r_list_measures(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_list_measures(tree));
    return rcpp_result_gen;
END_RCPP
}
// r_list_sections
Rcpp::List r_list_sections(Rcpp::S4 tree);
RcppExport SEXP _volpak_r_list_sections(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_list_sections(tree));
    return rcpp_result_gen;
END_RCPP
}
// r_list_stump
Rcpp::S4 r_list_stump(Rcpp::S4 tree);
RcppExport SEXP _volpak_r_list_stump(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_list_stump(tree));
    return rcpp_result_gen;
END_RCPP
}
// r_volpak_tree_height
Rcpp::NumericVector r_volpak_tree_height(Rcpp::S4 tree);
RcppExport SEXP _volpak_r_volpak_tree_height(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_volpak_tree_height(tree));
    return rcpp_result_gen;
END_RCPP
}
// r_volpak_stump_radius
Rcpp::NumericVector r_volpak_stump_radius(Rcpp::S4 tree);
RcppExport SEXP _volpak_r_volpak_stump_radius(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_volpak_stump_radius(tree));
    return rcpp_result_gen;
END_RCPP
}
// r_volpak_stump_vol
Rcpp::NumericVector r_volpak_stump_vol(Rcpp::S4 tree);
RcppExport SEXP _volpak_r_volpak_stump_vol(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_volpak_stump_vol(tree));
    return rcpp_result_gen;
END_RCPP
}
// r_volpak_ground_radius
Rcpp::NumericVector r_volpak_ground_radius(Rcpp::S4 tree);
RcppExport SEXP _volpak_r_volpak_ground_radius(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_volpak_ground_radius(tree));
    return rcpp_result_gen;
END_RCPP
}
// r_volpak_print
void r_volpak_print(Rcpp::S4 tree);
RcppExport SEXP _volpak_r_volpak_print(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    r_volpak_print(tree);
    return R_NilValue;
END_RCPP
}
// r_vpakinit
void r_vpakinit(Rcpp::NumericVector height, Rcpp::NumericVector diameter, Rcpp::NumericVector total_height);
RcppExport SEXP _volpak_r_vpakinit(SEXP heightSEXP, SEXP diameterSEXP, SEXP total_heightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type diameter(diameterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type total_height(total_heightSEXP);
    r_vpakinit(height, diameter, total_height);
    return R_NilValue;
END_RCPP
}
// r_vtm
Rcpp::NumericVector r_vtm(Rcpp::NumericVector height, Rcpp::NumericVector diameter, Rcpp::NumericVector total_height);
RcppExport SEXP _volpak_r_vtm(SEXP heightSEXP, SEXP diameterSEXP, SEXP total_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type diameter(diameterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type total_height(total_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_vtm(height, diameter, total_height));
    return rcpp_result_gen;
END_RCPP
}
// r_htd
Rcpp::NumericVector r_htd(Rcpp::NumericVector diams, Rcpp::NumericVector height, Rcpp::NumericVector diameter, Rcpp::NumericVector total_height);
RcppExport SEXP _volpak_r_htd(SEXP diamsSEXP, SEXP heightSEXP, SEXP diameterSEXP, SEXP total_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type diams(diamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type diameter(diameterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type total_height(total_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_htd(diams, height, diameter, total_height));
    return rcpp_result_gen;
END_RCPP
}
// r_vold
Rcpp::NumericVector r_vold(Rcpp::NumericVector diams, Rcpp::NumericVector height, Rcpp::NumericVector diameter, Rcpp::NumericVector total_height);
RcppExport SEXP _volpak_r_vold(SEXP diamsSEXP, SEXP heightSEXP, SEXP diameterSEXP, SEXP total_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type diams(diamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type diameter(diameterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type total_height(total_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_vold(diams, height, diameter, total_height));
    return rcpp_result_gen;
END_RCPP
}
// r_volh
Rcpp::NumericVector r_volh(Rcpp::NumericVector hags, Rcpp::NumericVector height, Rcpp::NumericVector diameter, Rcpp::NumericVector total_height);
RcppExport SEXP _volpak_r_volh(SEXP hagsSEXP, SEXP heightSEXP, SEXP diameterSEXP, SEXP total_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type hags(hagsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type diameter(diameterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type total_height(total_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_volh(hags, height, diameter, total_height));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_volpak_r_volpak_tree", (DL_FUNC) &_volpak_r_volpak_tree, 4},
    {"_volpak_r_total_vol", (DL_FUNC) &_volpak_r_total_vol, 3},
    {"_volpak_r_get_hag", (DL_FUNC) &_volpak_r_get_hag, 2},
    {"_volpak_r_get_radius", (DL_FUNC) &_volpak_r_get_radius, 2},
    {"_volpak_r_vol_to_tdub", (DL_FUNC) &_volpak_r_vol_to_tdub, 3},
    {"_volpak_r_vol_to_hag", (DL_FUNC) &_volpak_r_vol_to_hag, 3},
    {"_volpak_r_list_measures", (DL_FUNC) &_volpak_r_list_measures, 1},
    {"_volpak_r_list_sections", (DL_FUNC) &_volpak_r_list_sections, 1},
    {"_volpak_r_list_stump", (DL_FUNC) &_volpak_r_list_stump, 1},
    {"_volpak_r_volpak_tree_height", (DL_FUNC) &_volpak_r_volpak_tree_height, 1},
    {"_volpak_r_volpak_stump_radius", (DL_FUNC) &_volpak_r_volpak_stump_radius, 1},
    {"_volpak_r_volpak_stump_vol", (DL_FUNC) &_volpak_r_volpak_stump_vol, 1},
    {"_volpak_r_volpak_ground_radius", (DL_FUNC) &_volpak_r_volpak_ground_radius, 1},
    {"_volpak_r_volpak_print", (DL_FUNC) &_volpak_r_volpak_print, 1},
    {"_volpak_r_vpakinit", (DL_FUNC) &_volpak_r_vpakinit, 3},
    {"_volpak_r_vtm", (DL_FUNC) &_volpak_r_vtm, 3},
    {"_volpak_r_htd", (DL_FUNC) &_volpak_r_htd, 4},
    {"_volpak_r_vold", (DL_FUNC) &_volpak_r_vold, 4},
    {"_volpak_r_volh", (DL_FUNC) &_volpak_r_volh, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_volpak(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
