// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// times
Rcpp::NumericVector times(Rcpp::NumericVector x, Rcpp::NumericVector y);
RcppExport SEXP _volpak_times(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(times(x, y));
    return rcpp_result_gen;
END_RCPP
}
// r_volpak_tree
Rcpp::S4 r_volpak_tree(Rcpp::NumericVector height, Rcpp::NumericVector radius, Rcpp::NumericVector total_height, Rcpp::NumericVector stump_height);
RcppExport SEXP _volpak_r_volpak_tree(SEXP heightSEXP, SEXP radiusSEXP, SEXP total_heightSEXP, SEXP stump_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type total_height(total_heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stump_height(stump_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_volpak_tree(height, radius, total_height, stump_height));
    return rcpp_result_gen;
END_RCPP
}
// r_total_vol
Rcpp::NumericVector r_total_vol(Rcpp::LogicalVector abovestump, Rcpp::S4 tree);
RcppExport SEXP _volpak_r_total_vol(SEXP abovestumpSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type abovestump(abovestumpSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_total_vol(abovestump, tree));
    return rcpp_result_gen;
END_RCPP
}
// r_get_hag
Rcpp::NumericVector r_get_hag(Rcpp::NumericVector search_radius, Rcpp::S4 tree);
RcppExport SEXP _volpak_r_get_hag(SEXP search_radiusSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type search_radius(search_radiusSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_get_hag(search_radius, tree));
    return rcpp_result_gen;
END_RCPP
}
// r_vol_to_tdub
Rcpp::NumericVector r_vol_to_tdub(Rcpp::NumericVector tdub, Rcpp::LogicalVector abovestump, Rcpp::S4 tree);
RcppExport SEXP _volpak_r_vol_to_tdub(SEXP tdubSEXP, SEXP abovestumpSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tdub(tdubSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type abovestump(abovestumpSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_vol_to_tdub(tdub, abovestump, tree));
    return rcpp_result_gen;
END_RCPP
}
// r_vol_to_hag
Rcpp::NumericVector r_vol_to_hag(Rcpp::NumericVector hag, Rcpp::LogicalVector abovestump, Rcpp::S4 tree);
RcppExport SEXP _volpak_r_vol_to_hag(SEXP hagSEXP, SEXP abovestumpSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type hag(hagSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type abovestump(abovestumpSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(r_vol_to_hag(hag, abovestump, tree));
    return rcpp_result_gen;
END_RCPP
}
// r_vtm
Rcpp::NumericVector r_vtm(Rcpp::NumericVector height, Rcpp::NumericVector diameter, Rcpp::NumericVector total_height);
RcppExport SEXP _volpak_r_vtm(SEXP heightSEXP, SEXP diameterSEXP, SEXP total_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type diameter(diameterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type total_height(total_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_vtm(height, diameter, total_height));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_volpak_times", (DL_FUNC) &_volpak_times, 2},
    {"_volpak_r_volpak_tree", (DL_FUNC) &_volpak_r_volpak_tree, 4},
    {"_volpak_r_total_vol", (DL_FUNC) &_volpak_r_total_vol, 2},
    {"_volpak_r_get_hag", (DL_FUNC) &_volpak_r_get_hag, 2},
    {"_volpak_r_vol_to_tdub", (DL_FUNC) &_volpak_r_vol_to_tdub, 3},
    {"_volpak_r_vol_to_hag", (DL_FUNC) &_volpak_r_vol_to_hag, 3},
    {"_volpak_r_vtm", (DL_FUNC) &_volpak_r_vtm, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_volpak(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
